package assignment5;

import cputils.FileUtilsExceptionsThrown;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.List;
import java.io.FileNotFoundException;
import java.util.StringTokenizer;
import javax.swing.JOptionPane;

public class Assignment5MainForm extends javax.swing.JFrame {

    List<String> badLines; // for last question.

    public Assignment5MainForm() {
        initComponents();
    }

    private int year;
    private int month;
    private int day;
    private int highTemp;
    private int lowTemp;
    private String name;
    private String city;
    private String country;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnLoad = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtOutput = new javax.swing.JTextArea();
        txtInputFile = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("A5 - Exceptions");

        jLabel1.setText("File:");

        btnLoad.setText("Load");
        btnLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadActionPerformed(evt);
            }
        });

        txtOutput.setColumns(20);
        txtOutput.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        txtOutput.setRows(5);
        jScrollPane1.setViewportView(txtOutput);

        txtInputFile.setText("tempsA.csv");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(txtInputFile, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnLoad)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(btnLoad)
                    .addComponent(txtInputFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadActionPerformed

        List<String> lines = null;

        try {
            lines = FileUtilsExceptionsThrown.readIntoList(txtInputFile.getText());

            createWeatherHistory(lines);
            txtOutput.append(createWeatherHistory(lines).format());

        } catch (FileNotFoundException fnfe) {
            JOptionPane.showMessageDialog(this, "Can't find the file. Please provide the right file.");
        }


    }//GEN-LAST:event_btnLoadActionPerformed

    private WeatherHistory createWeatherHistory(List<String> data) throws FileNotFoundException {
        WeatherHistory res = null;
        Location location = null;
        SimpleDate simpledDate = null;
        List<DailyTemperature> dailyTempList = null;
        DailyTemperature dailyTemp = null;
        String fileName;
        List<String> errorList = new ArrayList<>();

        //res = new WeatherHistory(location, records);
        for (int i = 0; i < data.size(); i++) {
            String lines = data.get(i);
            StringTokenizer st = new StringTokenizer(lines, ",");

            while (st.hasMoreElements()) {
                if (i < 4) {
                    name = st.nextToken();
                    city = st.nextToken();
                    country = st.nextToken();
                    location = new Location(name, city, country);
                    data.add(location.format() + "\n");
                } else {
                    try {
                        year = Integer.parseInt(st.nextToken());
                        month = Integer.parseInt(st.nextToken());
                        day = Integer.parseInt(st.nextToken());
                        highTemp = Integer.parseInt(st.nextToken());
                        lowTemp = Integer.parseInt(st.nextToken());
                    } catch (NumberFormatException nfe) {
                        System.out.println("LINE: " + data.get(i) + " | SOURCE: " + year
                                + ", " + month + ", " + day + ", " + highTemp + ", " + lowTemp
                                + " | ERROR: " + nfe.getMessage());
                        int selection = JOptionPane.showConfirmDialog(this, "Do you want to save the ERROR?",
                                "Confirmation", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);
                        if (selection == JOptionPane.YES_OPTION) {
                            errorList.add(lines);
                            String str = JOptionPane.showInputDialog(this, "Please provide the file name");
                            fileName = str + ".txt";
                            FileUtilsExceptionsThrown.writeListToFile(errorList, fileName);
                        }
                    }
                    try {
                        try {
                            simpledDate = new SimpleDate(year, month, day);
                            try {
                                dailyTemp = new DailyTemperature(simpledDate, highTemp, lowTemp);
                                data.add(dailyTemp.format());
                                dailyTempList.add(dailyTemp);
                            } catch (TemperatureException te) {
                                System.out.println("LINE: " + data.get(i) + " | SOURCE: " + year
                                        + ", " + month + ", " + day + " | ERROR: " + te.getMessage());
                                int selection = JOptionPane.showConfirmDialog(this, "Do you want to save the ERROR?",
                                        "Confirmation", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);
                                if (selection == JOptionPane.YES_OPTION) {
                                    errorList.add(lines);
                                    String str = JOptionPane.showInputDialog(this, "Please provide the file name");
                                    fileName = str + ".txt";
                                    FileUtilsExceptionsThrown.writeListToFile(errorList, fileName);
                                }
                            }
                        } catch (SimpleDateException sde) {
                            System.out.println("LINE: " + data.get(i) + " | SOURCE: " + year
                                    + ", " + month + ", " + day + " | ERROR: " + sde.getMessage());
                            int selection = JOptionPane.showConfirmDialog(this, "Do you want to save the ERROR?",
                                    "Confirmation", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);
                            if (selection == JOptionPane.YES_OPTION) {
                                errorList.add(lines);
                                String str = JOptionPane.showInputDialog(this, "Please provide the file name");
                                fileName = str + ".txt";
                                FileUtilsExceptionsThrown.writeListToFile(errorList, fileName);
                            }
                        }
                    } catch (ArrayIndexOutOfBoundsException aiobe) {
                        System.out.println("LINE: " + data.get(i) + " | SOURCE: " + year
                                + ", " + month + ", " + day + " | ERROR: " + aiobe.getMessage());
                        int selection = JOptionPane.showConfirmDialog(this, "Do you want to save the ERROR?",
                                "Confirmation", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);
                        if (selection == JOptionPane.YES_OPTION) {
                            errorList.add(lines);
                            String str = JOptionPane.showInputDialog(this, "Please provide the file name");
                            fileName = str + ".txt";
                            FileUtilsExceptionsThrown.writeListToFile(errorList, fileName);
                        }
                    }
                }
            }

        }

        res = new WeatherHistory(location, dailyTempList);

        return res;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Assignment5MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Assignment5MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Assignment5MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Assignment5MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Assignment5MainForm().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLoad;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtInputFile;
    private javax.swing.JTextArea txtOutput;
    // End of variables declaration//GEN-END:variables

} // end class Assugnment5MainForm
